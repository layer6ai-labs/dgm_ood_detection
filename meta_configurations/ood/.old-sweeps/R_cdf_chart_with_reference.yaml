project: semantic-ellipsoids-dysweep
entity: platypus-dgm
count: 10000
run_name_changer:
  function_descriptor: |
    def func(conf, run_name):
      ret = conf['data']['in_distribution']['dataloader_args']['dataset']
      ret += '_vs_'
      ret += conf['data']['out_of_distribution']['dataloader_args']['dataset']
      ret += f"_{run_name}"
      return ret
  function_of_interest: func

# BASE configuration which is being used
base_config:
  base_model:
    run_dir: runs/flow_fmnist
    config_dir: experiments/training/flow_elaborate_fmnist.yaml
    checkpoint_dir: runs/flow_fmnist/checkpoints/de_nf_latest.pt
  data:
    # for reproducibility
    seed: 10
  ood:
    pick_single: True
    method: ood.methods.latent_score_method.LatentScore
    method_args:
      visualize_reference: True
      score_cls: ood.methods.latent_score_method.SemanticAwareEllipsoidScore
      score_args:
        p: 2
      tunable_parameter_name: radius
      tunable_lr: [0.01, 4.5]
      bincount: 100

sweep_configuration:
  ood:
    seed:
      sweep: true
      sweep_identifier: data_picking_seed
      values: [11, 21, 31, 41, 51]

  dy__upsert:
    - sweep: True
      sweep_identifier: B_dataset
      sweep_alias:
        - flow_fmnist
        - flow_cifar10
        - flow_svhn
        - flow_mnist
      values:
        - base_model:
            run_dir: runs/flow_fmnist
            config_dir: experiments/training/flow_elaborate_fmnist.yaml
            checkpoint_dir: runs/flow_fmnist/checkpoints/de_nf_latest.pt
        - base_model:
            run_dir: runs/flow_cifar10
            config_dir: experiments/training/flow_heavy_cifar10.yaml
            checkpoint_dir: runs/flow_cifar10/checkpoints/de_nf_latest.pt
        - base_model:
            run_dir: runs/flow_svhn
            config_dir: experiments/training/flow_heavy_svhn.yaml
            checkpoint_dir: runs/flow_svhn/checkpoints/de_nf_latest.pt
        - base_model:
            run_dir: runs/flow_mnist
            config_dir: experiments/training/flow_elaborate_mnist.yaml
            checkpoint_dir: runs/flow_mnist/checkpoints/de_nf_latest.pt
        
    - sweep: True
      sweep_identifier: C_ood_or_not
      sweep_alias:
        - ood_for_test
        - in_distr_for_test
      values:
        - data:
            in_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint

                      def func(conf):

                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'fashion-mnist'
                        if last_part == 'cifar10':
                          return 'cifar10'
                        if last_part == 'mnist':
                          return 'mnist'
                        if last_part == 'svhn':
                          return 'svhn'
                    function_of_interest: func
            out_of_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint

                      def func(conf):

                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'mnist'
                        if last_part == 'cifar10':
                          return 'svhn'
                        if last_part == 'mnist':
                          return 'fashion-mnist'
                        if last_part == 'svhn':
                          return 'cifar10'
                    function_of_interest: func
        - data:
            in_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint
                      def func(conf):

                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'fashion-mnist'
                        if last_part == 'cifar10':
                          return 'cifar10'
                        if last_part == 'mnist':
                          return 'mnist'
                        if last_part == 'svhn':
                          return 'svhn'
                    function_of_interest: func
            out_of_distribution:
              dataloader_args:
                dataset:
                  dy__eval:
                    expression: |
                      from pprint import pprint

                      def func(conf):
                        last_part = conf['base_model']['run_dir'].split('_')[-1]
                        if last_part == 'fmnist':
                          return 'fashion-mnist'
                        if last_part == 'cifar10':
                          return 'cifar10'
                        if last_part == 'mnist':
                          return 'mnist'
                        if last_part == 'svhn':
                          return 'svhn'
                    function_of_interest: func