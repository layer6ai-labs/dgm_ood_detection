# In this set of experiments
# I consider a flow model on svhn or cifar and run the analytical Gaussian convolution
# method on the models with in and out of distribution datasets and plot the convolution values I obtain
# No sampling is done in this sweep for fast computation
project: linear-approximations
sweep_name: cifar-vs-svhn-gaussian-conv-rate-trend
entity: platypus-dgm
count: 10000
method: grid

# Change the name of the run to [in_distribution_dataset]_vs_[out_of_distribution_dataset]_[run_name]
# using the dysweep name changer for better readability
run_name_changer:
  expression: |
    from meta_configurations import *
  function_of_interest: ood_run_name_changer

# BASE configuration which is being used
base_config:
  data:
    # specify the datasets and dataloader configurations for the in and out of distribution data.
    in_distribution:
      dataloader_args:
        make_valid_loader: false
      pick_loader: train
    out_of_distribution:
      dataloader_args:
        make_valid_loader: false
    # for reproducibility
    seed: 10
  ood:
    # to bypass or not to bypass
    bypass_visualization: True

    pick_single: False
    use_dataloader: True
    seed: 100
    histogram_limit: 2000
    pick_count: 3

    # The degree of visualization for samples
    samples_visualization: 2
    
    # The OOD detection method in use
    method: ood.methods.linear_approximations.RadiiTrend
    method_args:
      # No sampling for fast computation
      sampling: False
        
      verbose: 2
      
      latent_statistics_calculator_class: ood.methods.linear_approximations.GaussianConvolutionRateStatsCalculator
      latent_statistics_calculator_args:
        encoding_model_class: ood.methods.linear_approximations.EncodingFlow
        encoding_model_args:
          chunk_size: 1
          use_functorch: True
          use_forward_mode: True
          use_vmap: False
          verbose: 2

        verbose: 0
      
      calculate_statistics_extra_args:
        order: 1
      
      include_reference: False

      radii_range: [0.000004, 0.0005]
      radii_n: 500

sweep_configuration:

  dy__upsert:
    - ood:
        method_args:
          log_scale:
            sweep: True
            values: [False, True]
    - sweep: True
      sweep_identifier: std_or_not
      sweep_alias:
      - with_std
      - no_std
      values:
      - ood:
          method_args:
            visualization_args:
              with_std: True
      - ood:
          method_args:
            visualization_args:
              with_std: False
    - sweep: True
      sweep_identifier: Y_boost_range_right
      sweep_alias:
      - 100xright
      - 10xright
      - 1xright
      values:
      - ood:
          method_args:
            radii_range:
              dy__eval:
                expression: |
                  def boost100xright(conf):
                    return [conf['ood']['method_args']['radii_range'][0], conf['ood']['method_args']['radii_range'][1] * 100]
                function_of_interest: boost100xright
      - ood:
          method_args:
            radii_range:
              dy__eval:
                expression: |
                  def boost10xright(conf):
                    return [conf['ood']['method_args']['radii_range'][0], conf['ood']['method_args']['radii_range'][1] * 10]
                function_of_interest: boost10xright
      - ood:
          method_args:
            radii_range:
              dy__eval:
                expression: |
                  def boost1xright(conf):
                    return conf['ood']['method_args']['radii_range']
                function_of_interest: boost1xright
    - sweep: True
      sweep_identifier: Z_boost_range_left
      sweep_alias:
      - 100xleft
      - 10xleft
      - 1xleft
      values:
      - ood:
          method_args:
            radii_range:
              dy__eval:
                expression: |
                  def boost100xleft(conf):
                    return [conf['ood']['method_args']['radii_range'][0] * 100, conf['ood']['method_args']['radii_range'][1]]
                function_of_interest: boost100xleft
      - ood:
          method_args:
            radii_range:
              dy__eval:
                expression: |
                  def boost10xleft(conf):
                    return [conf['ood']['method_args']['radii_range'][0] * 10, conf['ood']['method_args']['radii_range'][1]]
                function_of_interest: boost10xleft
      - ood:
          method_args:
            radii_range:
              dy__eval:
                expression: |
                  def boost1xleft(conf):
                    return conf['ood']['method_args']['radii_range']
                function_of_interest: boost1xleft
    - sweep: True
      sweep_identifier: B_in_distribution_model
      sweep_alias:
        # colorful flows
        - flow_cifar10_RQ_NSF
        - flow_svhn_RQ_NSF
      values:
        - base_model:
            config_dir: checkpoints-zei1ialy/PiecewiseRationalQuadraticCouplingTransform_cifar10_heteronomous_owjcfa1x_final/run_config.json
            checkpoint_dir: checkpoints-zei1ialy/PiecewiseRationalQuadraticCouplingTransform_cifar10_heteronomous_owjcfa1x_final/checkpoints/de_nf_best_valid.pt
          data:
            in_distribution:
              dataloader_args:
                dataset: cifar10
                train_batch_size: 8
                valid_batch_size: 8
                test_batch_size: 8
            out_of_distribution:
              dataloader_args:
                train_batch_size: 8
                valid_batch_size: 8
                test_batch_size: 8
        - base_model:
            config_dir: checkpoints-zei1ialy/PiecewiseRationalQuadraticCouplingTransform_svhn_hittitics_znujejsh_final/run_config.json
            checkpoint_dir: checkpoints-zei1ialy/PiecewiseRationalQuadraticCouplingTransform_svhn_hittitics_znujejsh_final/checkpoints/de_nf_best_valid.pt
          data:
            in_distribution:
              dataloader_args:
                dataset: svhn
                train_batch_size: 8
                valid_batch_size: 8
                test_batch_size: 8
            out_of_distribution:
              dataloader_args:
                train_batch_size: 8
                valid_batch_size: 8
                test_batch_size: 8
        
    - data:
        out_of_distribution:
          pick_loader: test
          dataloader_args:
            dy__upsert:
              - sweep: True
                sweep_identifier: ood_picker
                sweep_alias:
                - svhn
                - cifar10
                - generated
                values:
                - dataset: svhn
                - dataset: cifar10
                - dy__eval:
                    expression: |
                      from meta_configurations import get_generated_config

                      def pick_generated(conf):
                        return get_generated_config(conf)

                    function_of_interest: pick_generated